[gd_resource type="ShaderMaterial" load_steps=6 format=3 uid="uid://dqnmtukcnqll7"]

[sub_resource type="Shader" id="Shader_da7ms"]
code = "shader_type canvas_item;

//Adding another noises
uniform sampler2D texture2:repeat_enable; //Flag for adding looping
uniform sampler2D colorTexture;

uniform vec2 scrollNoise1 = vec2(0.1,0.1);
uniform vec2 scrollNoise2 = vec2(0.3,0.2);

void vertex() {
	// Called for every vertex the material is visible on.
}

void fragment() {
	//Moving noises
	float textureColor1 = texture(TEXTURE, UV + scrollNoise1 * TIME).r;
	float textureColor2 = texture(texture2, UV + scrollNoise2 * TIME).r;
	//Multiply the color values to get the overlaping brightness
	//0.8 - UV.y used for limit the texture
	float energy = textureColor1 * textureColor2 - (1.0 - UV.y) * tan(TIME * 2.0) ;
	vec4 color = texture(colorTexture,vec2(energy),1.0);
	COLOR = color;
	// Called for every pixel the material is visible on.
}

//void light() {
	// Called for every pixel for every light affecting the CanvasItem.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="Gradient" id="Gradient_b5dsm"]
offsets = PackedFloat32Array(0.0327869, 0.163934, 0.303279, 0.368852, 0.721311)
colors = PackedColorArray(0, 0, 0, 0, 0.807232, 0.0426106, 0.225937, 0.952941, 0.986634, 0.429307, 0.268196, 0.941176, 0.841507, 0.821512, 0, 0.933333, 0.980392, 0.901961, 0.921569, 0.996078)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_qbjj0"]
gradient = SubResource("Gradient_b5dsm")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_b3yox"]
noise_type = 2
seed = 2

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_m7u0d"]
seamless = true
noise = SubResource("FastNoiseLite_b3yox")

[resource]
shader = SubResource("Shader_da7ms")
shader_parameter/scrollNoise1 = Vector2(0.1, 0.5)
shader_parameter/scrollNoise2 = Vector2(0.2, 1)
shader_parameter/texture2 = SubResource("NoiseTexture2D_m7u0d")
shader_parameter/colorTexture = SubResource("GradientTexture1D_qbjj0")
