[gd_resource type="Shader" format=3 uid="uid://c1ggwmbanqk7y"]

[resource]
code = "shader_type canvas_item;

//Adding another noises
uniform sampler2D texture2:repeat_enable; //Flag for adding looping
uniform sampler2D colorTexture;

uniform vec2 scrollNoise1 = vec2(0.1,0.1);
uniform vec2 scrollNoise2 = vec2(0.3,0.2);

void vertex() {
	// Called for every vertex the material is visible on.
}

void fragment() {
	//Moving noises
	float textureColor1 = texture(TEXTURE, UV + scrollNoise1 * TIME).r;
	float textureColor2 = texture(texture2, UV + scrollNoise2 * TIME).r;
	//Multiply the color values to get the overlaping brightness
	//0.8 - UV.y used for limit the texture
	float energy = textureColor1 * textureColor2 - (0.8 - UV.y) * 0.6;
	vec4 color = texture(colorTexture,vec2(energy),1.0);
	COLOR = color;
	// Called for every pixel the material is visible on.
}

//void light() {
	// Called for every pixel for every light affecting the CanvasItem.
	// Uncomment to replace the default light processing function with this one.
//}
"
